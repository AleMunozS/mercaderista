// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id         Int          @id @default(autoincrement())
  nombre     String
  email      String       @unique
  password   String
  roles      String
  asistencia Asistencia[]
  vouchers   Voucher[]
  eventos    Evento[]
}

model Local {
  id         Int          @id @default(autoincrement())
  nombre     String
  direccion  String
  supermercado String
  asistencia Asistencia[]
  vouchers   Voucher[]
}

model Asistencia {
  id                 Int          @id @default(autoincrement())
  usuario            Usuario      @relation(fields: [usuarioId], references: [id])
  usuarioId          Int
  local              Local        @relation(fields: [localId], references: [id])
  localId            Int
  checkInTime        DateTime
  checkInGeoLocation String
  checkOutTime       DateTime?
  checkOutGeoLocation String?
}

model Voucher {
  id          Int           @id @default(autoincrement())
  tipo        String        // "inventario" o "merma"
  usuario     Usuario       @relation(fields: [usuarioId], references: [id])
  usuarioId   Int
  local       Local         @relation(fields: [localId], references: [id])
  localId     Int
  createdAt   DateTime      @default(now())
  voucherLines VoucherLine[]
  fotos       Foto[]
}

model VoucherLine {
  id         Int          @id @default(autoincrement())
  voucher    Voucher      @relation(fields: [voucherId], references: [id])
  voucherId  Int
  item       Item         @relation(fields: [itemId], references: [id])
  itemId     Int
  cantidad   Int
  precio     Float?
}

model Item {
  id          Int           @id @default(autoincrement())
  nombre      String
  itemCode    String         @unique
  voucherLines VoucherLine[] // Relaci√≥n inversa hacia VoucherLine
}

model Foto {
  id        Int          @id @default(autoincrement())
  voucher   Voucher      @relation(fields: [voucherId], references: [id])
  voucherId Int
  url       String
  createdAt DateTime     @default(now())
}

model Evento {
  id        Int          @id @default(autoincrement())
  usuario   Usuario      @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  mensaje   String
  createdAt DateTime     @default(now())
}

